AWSTemplateFormatVersion: '2010-09-09'
Description: This stack is used to provision the VPC and security group for web application stack.

Parameters:
  albacmcert: 
    Type: String
    Default: 'arn:aws:acm:us-west-2:510107092560:certificate/e717c248-accb-4fac-a24d-2c106d83ee1f'
    Description: cert arn
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    Default: w0rd1ress123
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    Default: admin
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
Mappings:
  AWSInstanceType2Arch:
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6

Resources:
  webvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/22
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: webvpc
  sgalb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: sg for public alb
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref webvpc
      Tags: 
        - Key: Name
          Value: sg-alb
  sgwebserver:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: sg for web instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref sgalb
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref sgalb
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId:
        !Ref webvpc
      Tags: 
        - Key: Name
          Value: sg-webserver
  sgdb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: sg for DB instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref sgwebserver
      VpcId:
        !Ref webvpc
      Tags: 
        - Key: Name
          Value: sg-db
  sgelasticache:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: sg for elastic cache instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          SourceSecurityGroupId: !Ref sgwebserver
      VpcId:
        !Ref webvpc
      Tags: 
        - Key: Name
          Value: sg-elasticache
  WebSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 172.31.0.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: WebSubnet0-private
      VpcId: !Ref webvpc
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: 172.31.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: WebSubnet1-private
      VpcId: !Ref webvpc

  WebSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable0
      SubnetId: !Ref WebSubnet0
  WebSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref WebSubnet1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'InternetGateway / ', !Ref 'AWS::StackName' ] ]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref webvpc

  NatEIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref webvpc
  NatGateway0:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP0.AllocationId
      SubnetId: !Ref PublicSubnet0
  NatRoute0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway0
  NatRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['NatRouteTable0 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref webvpc

  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref webvpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicRouteTable / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref webvpc
  PublicRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable      

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet0
      VpcId: !Ref webvpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
      VpcId: !Ref webvpc
  apploadbalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 60
      SecurityGroups:
      - !Ref sgalb
      Tags:
      - Key: Name
        Value: apploadbalancer
  alblistener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      #Certificates:
        #- CertificateArn: !Ref albacmcert
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref albtargetgroup
      LoadBalancerArn: !Ref apploadbalancer
      Port: 80
      Protocol: HTTP
  albtargetgroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /wordpress/wp-admin/install.php
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: albtargetgroup
      UnhealthyThresholdCount: 5
      VpcId: !Ref webvpc
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: 
        - !Ref WebSubnet0
        - !Ref WebSubnet1
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref albtargetgroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php73: []
              php73-mysqlnd: []
              mysql57: []
              httpd24: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPassword
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'localhost'/'
                  - !GetAtt 
                    - DBInstance
                    - Endpoint.Address
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          commands:
            01_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref sgwebserver
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --configsets wordpress_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  #DBEC2SecurityGroup:
    #Type: 'AWS::EC2::SecurityGroup'
    #Properties:
     # GroupDescription: Open database for access
      #SecurityGroupIngress:
       # - IpProtocol: tcp
        #  FromPort: '3306'
         # ToPort: '3306'
          #SourceSecurityGroupId: !Ref WebServerSecurityGroup
      #VpcId: !Ref webvpc

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      MultiAZ: false
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t2.small
      AllocatedStorage: 5
      #VPCSecurityGroups: 
        #- !GetAtt 
          #- sgdb
          #- GroupId
  
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AZMode: single-az
      CacheNodeType: cache.t2.small
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      Engine: redis
      EngineVersion: 3.2.4
      NumCacheNodes: 1
      Tags:
        - Key: Name
          Value: ElastiCacheCluster
      VpcSecurityGroupIds:
      - !Ref sgelasticache

  ElastiCacheSubnetGroup: 
    Type: AWS::ElastiCache::SubnetGroup
    Properties: 
      Description: ElastiCache Subnet Group for WordPress
      SubnetIds: 
        - !Ref WebSubnet0
        - !Ref WebSubnet1

Outputs:
  sgdb:
    Value: !Ref sgdb
  sgelasticache:
    Value: !Ref sgelasticache
  sgalb:
    Value: !Ref sgalb
  sgwebserver:
    Value: !Ref sgwebserver
  apploadbalancer:
    Value: !Ref apploadbalancer
  albtargetgroup:
    Value: !Ref albtargetgroup
  WebServerGroup:
    Value: !Ref WebServerGroup
  DBInstance:
    Value: !Ref DBInstance
  ElastiCacheCluster:
    Value: !Ref ElastiCacheCluster
  WebsiteURL:
        Value: !Join 
          - ''
          - - 'http://'
            - !GetAtt 
              - apploadbalancer
              - DNSName
            - /wordpress
        Description: WordPress Website